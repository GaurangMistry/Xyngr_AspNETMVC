@model xyngr.Models.BranchesViewModel
@Scripts.Render("~/bundles/jqueryval")
<script src="~/Scripts/Admin/Branch/AddEditBranch.js"></script>
<link rel="stylesheet" type="text/css" href="~/Content/app-assets/vendors/js/gallery/photo-swipe/photoswipe.css">
<link rel="stylesheet" type="text/css" href="~/Content/app-assets/vendors/js/gallery/photo-swipe/default-skin/default-skin.css">
<link rel="stylesheet" type="text/css" href="~/Content/app-assets/css/pages/gallery.css">
<link href="~/Content/dropzone.css" rel="stylesheet" />
<link rel="stylesheet" type="text/css" href="~/Content/app-assets/css/plugins/file-uploaders/dropzone.css">
<script src="~/Scripts/dropzone.js"></script>

<section id="basic-form-layouts">
    <div class="row match-height">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title" id="basic-layout-form">Add Destination</h4>
                    <a class="heading-elements-toggle"><i class="la la-ellipsis-v font-medium-3"></i></a>
                    <div class="heading-elements">
                        <ul class="list-inline mb-0">
                            <li><a data-action="collapse"><i class="ft-minus"></i></a></li>
                            <li><a data-action="reload"><i class="ft-rotate-cw"></i></a></li>
                            <li><a data-action="expand"><i class="ft-maximize"></i></a></li>
                            <li><a data-action="close"><i class="ft-x"></i></a></li>
                        </ul>
                    </div>
                </div>
                <div class="card-content collapse show">
                    <div class="card-body">
                        <form class="form" id="frmAddBranch">
                            <div class="form-body">
                                <h4 class="form-section"><i class="ft-user"></i>Venue</h4>
                                <div class="row">
                                    <input type="hidden" id="hdnfileName" name="ProfileImage" />
                                    @Html.HiddenFor(model => model.BranchID)
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label for="txtBusinessID">Select Venue</label>
                                            @{
                                                List<SelectListItem> listBusiness = new List<SelectListItem>();
                                                var isselected = false;
                                                foreach (var m in Model.Businesslist)
                                                {
                                                    if (m.BusinessID == Model.BusinessID)
                                                    {
                                                        isselected = true;
                                                    }
                                                    else
                                                    {
                                                        isselected = false;
                                                    }

                                                    listBusiness.Add(new SelectListItem { Text = m.Name, Value = m.BusinessID.ToString(), Selected = isselected });
                                                }
                                            }

                                            @Html.DropDownListFor(model => model.BusinessID, listBusiness, null, new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.BusinessID, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <h4 class="form-section"><i class="ft-user"></i>Headline</h4>
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="form-group">
                                            <label for="txtAddress1">Headline</label>
                                            @Html.TextBoxFor(model => model.Address1, new { @class = "form-control", id = "txtAddress1", placeholder = "Headline" })
                                            @Html.ValidationMessageFor(model => model.Address1, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <h4 class="form-section"><i class="la la-location-arrow"></i>Location Information</h4>
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="form-group">
                                            <label for="txtAddress2">Address<span class="mendatory">*</span></label> <span id="latitude" class="latlong-lable">latitude</span> <span id="longitude" class="latlong-lable">longitude</span>
                                            @Html.TextBoxFor(model => model.Address2, new { @class = "form-control", id = "txtAddress2", placeholder = "Address" })
                                            @Html.ValidationMessageFor(model => model.Address2, "", new { @class = "text-danger" })
                                            @Html.HiddenFor(model => model.Latitude, new { id = "hdnLatitude" })
                                            @Html.HiddenFor(model => model.Longitude, new { id = "hdnLongitude" })
                                        </div>
                                    </div>
                                </div>
                                <div class="row" id="mapViewDetail">
                                    <div class="col-sm-12">
                                        <div class="form-group">
                                            <div class="mapPlaceholder"><span class="fa fa-spin fa-spinner"></span></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="txtCity">City</label>
                                            @Html.TextBoxFor(model => model.City, new { @class = "form-control", id = "txtCity", placeholder = "City" })
                                            @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="txtState">State</label>
                                            @Html.TextBoxFor(model => model.State, new { @class = "form-control", id = "txtState", placeholder = "State" })
                                            @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="txtCountry">Country</label>
                                            @Html.TextBoxFor(model => model.Country, new { @class = "form-control", id = "txtCountry", placeholder = "Country" })
                                            @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <h4 class="form-section"><i class="la la-mobile"></i>Contact Information</h4>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label for="txtEmail">Email<span class="mendatory">*</span></label>
                                            @Html.TextBoxFor(model => model.Email, new { @class = "form-control", id = "txtEmail", placeholder = "Email" })
                                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label for="txtPhone">Phone<span class="mendatory">*</span></label>
                                            @Html.TextBoxFor(model => model.Phone, new { @class = "form-control", id = "txtPhone", placeholder = "Phone" })
                                            @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <h4 class="form-section"><i class="la la-sort-desc"></i>Overview</h4>
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="form-group">
                                            <label for="txtSmallDescription">Small Description<span class="mendatory">*</span></label>
                                            @Html.TextAreaFor(model => model.SmallDescription, new { @class = "form-control", id = "txtSmallDescription", placeholder = "Small Description", @rows = 4 })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="form-group">
                                            <label for="txtDescription">Description</label>
                                            @Html.TextAreaFor(model => model.Description, new { @class = "form-control ckeditor", id = "txtDescription", placeholder = "Description", @rows = 10, @cols = "20" })
                                        </div>
                                    </div>
                                </div>
                                <h4 class="form-section"><i class="la la-paper-plane-o"></i>Other Information</h4>
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="form-group">
                                            <label for="txtOpeningHours">Opening Hours</label>
                                            @Html.TextAreaFor(model => model.OpeningHours, new { @class = "form-control ckeditor", id = "txtOpeningHours", placeholder = "Opening Hours", @rows = 4, @cols = "10" })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-2">
                                        <div class="form-group">
                                            <label for="txtEmail">Rating</label>
                                            @{
                                                List<SelectListItem> listRating = new List<SelectListItem>();
                                                listRating.Add(new SelectListItem { Text = "0", Value = "0", Selected = true });
                                                listRating.Add(new SelectListItem { Text = "1", Value = "1" });
                                                listRating.Add(new SelectListItem { Text = "2", Value = "2" });
                                                listRating.Add(new SelectListItem { Text = "3", Value = "3" });
                                                listRating.Add(new SelectListItem { Text = "4", Value = "4" });
                                                listRating.Add(new SelectListItem { Text = "5", Value = "5" });
                                            }

                                            @Html.DropDownListFor(model => model.Rating, listRating, null, new { @class = "form-control" })
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            <label for="txtSalePeriod">Sale Period</label>
                                            @Html.TextBoxFor(model => model.SalePeriod, new { @class = "form-control", id = "txtSalePeriod", placeholder = "Sale Period" })
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="form-group">
                                            <label for="txtIsFeatured"></label>
                                            <div class="custom-control custom-checkbox">
                                                @Html.CheckBoxFor(model => model.IsFeatured, new { @class = "custom-control-input", id = "chkIsFeatured" })
                                                <label class="custom-control-label" for="chkIsFeatured">Is Featured</label>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-2">
                                        <div class="form-group">
                                            <label for="txtIsNew"></label>
                                            <div class="custom-control custom-checkbox">
                                                @Html.CheckBoxFor(model => model.IsNew, new { @class = "custom-control-input", id = "chkIsNew" })
                                                <label class="custom-control-label" for="chkIsNew">Is New</label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-8">
                                        <div class="form-group">
                                            <label for="txtEnternalURL">Enternal URL (This is URL where we need to redirect to our user)</label>
                                            @Html.TextBoxFor(model => model.ExternalURL, new { @class = "form-control", id = "txtEnternalURL", placeholder = "External URL" })
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label for="txtEnternalURL">Banenr</label>
                                            @{
                                                List<SelectListItem> listBanner = new List<SelectListItem>();
                                                listBanner.Add(new SelectListItem { Text = "Select Banner", Value = "0" });
                                                foreach (var m in Model.Bannerlist)
                                                {
                                                    listBanner.Add(new SelectListItem { Text = m.Title, Value = m.BannerID.ToString() });
                                                }
                                            }
                                            @Html.DropDownListFor(model => model.BannerID, listBanner, null, new { @class = "form-control" })
                                        </div>
                                    </div>
                                </div>
                                <h4 class="form-section"><i class="la la-search"></i>Profile Photo</h4>
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="form-group">
                                            <label for="dpz-single-file">Profile Photo (1400px X 700px)</label>
                                            <div class="dropzone" id="myAwesomeDropzone" name="mainFileUploader">
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                @if (ViewBag.IsEditMode)
                                {
                                    <div class="my-gallery" itemscope itemtype="http://schema.org/ImageGallery">
                                        <div class="row">
                                            <figure class="col-lg-3 col-md-6 col-12" itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
                                                <a href="@Model.ImageURL" itemprop="contentUrl" data-size="480x360">
                                                    <img class="img-thumbnail img-fluid" src="@Model.ImageURL"
                                                         itemprop="thumbnail" alt="Image description" />
                                                </a>
                                            </figure>
                                        </div>
                                    </div>
                                    <!-- Root element of PhotoSwipe. Must have class pswp. -->
                                    <div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">

                                        <!-- Background of PhotoSwipe.
            It's a separate element as animating opacity is faster than rgba(). -->
                                        <div class="pswp__bg"></div>

                                        <!-- Slides wrapper with overflow:hidden. -->
                                        <div class="pswp__scroll-wrap">

                                            <!-- Container that holds slides.
                PhotoSwipe keeps only 3 of them in the DOM to save memory.
                Don't modify these 3 pswp__item elements, data is added later on. -->
                                            <div class="pswp__container">
                                                <div class="pswp__item"></div>
                                                <div class="pswp__item"></div>
                                                <div class="pswp__item"></div>
                                            </div>

                                            <!-- Default (PhotoSwipeUI_Default) interface on top of sliding area. Can be changed. -->
                                            <div class="pswp__ui pswp__ui--hidden">

                                                <div class="pswp__top-bar">

                                                    <!--  Controls are self-explanatory. Order can be changed. -->

                                                    <div class="pswp__counter"></div>

                                                    <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>

                                                    <button class="pswp__button pswp__button--share" title="Share"></button>

                                                    <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>

                                                    <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>

                                                    <!-- Preloader demo http://codepen.io/dimsemenov/pen/yyBWoR -->
                                                    <!-- element will get class pswp__preloader--active when preloader is running -->
                                                    <div class="pswp__preloader">
                                                        <div class="pswp__preloader__icn">
                                                            <div class="pswp__preloader__cut">
                                                                <div class="pswp__preloader__donut"></div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
                                                    <div class="pswp__share-tooltip"></div>
                                                </div>

                                                <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)"></button>

                                                <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)"></button>

                                                <div class="pswp__caption">
                                                    <div class="pswp__caption__center"></div>
                                                </div>

                                            </div>

                                        </div>

                                    </div>

                                }

                                <h4 class="form-section"><i class="la la-search"></i>Meta Content for SEO</h4>
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="form-group">
                                            <label for="txtMetaAuthorContent">Meta Author Content</label>
                                            @Html.TextAreaFor(model => model.MetaAuthorContent, new { @class = "form-control", id = "txtMetaAuthorContent", placeholder = "Meta Author Content", @rows = 4 })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="form-group">
                                            <label for="txtMetaDescContent">Meta Description Content</label>
                                            @Html.TextAreaFor(model => model.MetaDescContent, new { @class = "form-control", id = "txtMetaDescContent", placeholder = "Meta Description Content", @rows = 4 })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="form-group">
                                            <label for="txtMetaKeyWordContent">Meta KeyWord Content</label>
                                            @Html.TextAreaFor(model => model.MetaKeyWordContent, new { @class = "form-control", id = "txtMetaKeyWordContent", placeholder = "Meta KeyWord Content", @rows = 4 })
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            <label for="projectinput1">Status</label>
                                            @{
                                                List<SelectListItem> listStatus = new List<SelectListItem>();
                                                listStatus.Add(new SelectListItem { Text = "Active", Value = "true", Selected = true });
                                                listStatus.Add(new SelectListItem { Text = "Inactive", Value = "false" });
                                            }

                                            @Html.DropDownListFor(model => model.Status, listStatus, null, new { @class = "form-control" })
                                        </div>
                                    </div>
                                </div>

                                <div class="form-actions right">
                                    <a href="#" onclick="window.history.back();" class="btn btn-warning mr-1"><i class="ft-x"></i> Cancel</a>
                                    <button type="button" onclick="SaveBranch(@ViewBag.IsEditMode)" class="btn btn-primary">
                                        <i class="la la-check-square-o"></i> Save
                                    </button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<script src="~/Content/app-assets/vendors/js/editors/ckeditor/ckeditor.js" type="text/javascript"></script>
<script src="~/Content/app-assets/js/scripts/editors/editor-ckeditor.js" type="text/javascript"></script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBvYPT-CHsHLlKHwSbiNDx26aUEuVjf9LM&libraries=places&sensor=false" type="text/javascript"></script>

<script>
    (function ($) {

        initialize();
        var options = {
            zoom: 14,
            zoomControl: true,
            scrollwheel: false,
            zoomControlOptions: {
                position: google.maps.ControlPosition.TOP_RIGHT
            }
        };
        var styles = [{
            stylers: [{
                hue: "#cccccc"
            }, {
                saturation: -100
            }]
        }, {
            featureType: "road",
            elementType: "geometry",
            stylers: [{
                lightness: 100
            }, {
                visibility: "simplified"
            }]
        }, {
            featureType: "road",
            elementType: "labels",
            stylers: [{
                visibility: "on"
            }]
        }, {
            featureType: "poi",
            stylers: [{
                visibility: "off"
            }]
        }];

        var newMarker = null;
        var markers = [];
        var props = [];

        $('#mapViewDetail').height(300);

        var newMarker = null;
        setTimeout(function () {
            map = new google.maps.Map(document.getElementById('mapViewDetail'), options);
            var styledMapType = new google.maps.StyledMapType(styles, {
                name: 'Styled'
            });

            map.mapTypes.set('Styled', styledMapType);
            map.setCenter(new google.maps.LatLng($('#hdnLatitude').val(), $('#hdnLongitude').val()));
            $('#latitude').text($('#hdnLatitude').val());
            $('#longitude').text($('#hdnLongitude').val());

            map.setZoom(10);

            if ($('#txtAddress2').length > 0) {
                newMarker = new google.maps.Marker({
                    position: new google.maps.LatLng($('#hdnLatitude').val(), $('#hdnLongitude').val()),
                    map: map,
                    icon: new google.maps.MarkerImage(
                        '/images/marker.png',
                        null,
                        null,
                        null,
                        new google.maps.Size(36, 36)
                    ),
                    draggable: true,
                    animation: google.maps.Animation.DROP,
                });

                google.maps.event.addListener(newMarker, "mouseup", function (event) {
                    var latitude = this.position.lat();
                    var longitude = this.position.lng();
                    $('#latitude').text(this.position.lat());
                    $('#longitude').text(this.position.lng());
                    $('#hdnLatitude').val(newMarker.getPosition().lat());
                    $('#hdnLongitude').val(newMarker.getPosition().lng());

                    codeLatLng(this.position.lat(), this.position.lng());
                });
            }
        }, 300);

        // functionality for autocomplete address field
        if ($('#txtAddress2').length > 0) {
            var address = document.getElementById('txtAddress2');
            var addressAuto = new google.maps.places.Autocomplete(address);

            google.maps.event.addListener(addressAuto, 'place_changed', function () {
                var place = addressAuto.getPlace();

                if (!place.geometry) {
                    return;
                }
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                }
                newMarker.setPosition(place.geometry.location);
                newMarker.setVisible(true);
                $('#latitude').text(newMarker.getPosition().lat());
                $('#longitude').text(newMarker.getPosition().lng());

                $('#hdnLatitude').val(newMarker.getPosition().lat());
                $('#hdnLongitude').val(newMarker.getPosition().lng());

                codeLatLng(newMarker.getPosition().lat(), newMarker.getPosition().lng());
                return false;
            });
        }

        function initialize() {
            geocoder = new google.maps.Geocoder();
        }

        function codeLatLng(lat, lng) {
            var latlng = new google.maps.LatLng(lat, lng);
            geocoder.geocode({ 'latLng': latlng }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    if (results[1]) {
                        for (var i = 0; i < results[0].address_components.length; i++) {
                            for (var b = 0; b < results[0].address_components[i].types.length; b++) {
                                if (results[0].address_components[i].types[b] == "locality") {
                                    city = results[0].address_components[i];
                                    //break;
                                }
                                else if (results[0].address_components[i].types[b] == "administrative_area_level_3") {
                                    city = results[0].address_components[i];
                                    //break;
                                }
                                else if (results[0].address_components[i].types[b] == "administrative_area_level_2") {
                                    region = results[0].address_components[i];
                                    //break;
                                }
                                else if (results[0].address_components[i].types[b] == "administrative_area_level_1") {
                                    region = results[0].address_components[i];
                                    //break;
                                }
                                else if (results[0].address_components[i].types[b] == "country") {
                                    country = results[0].address_components[i];
                                    //break;
                                }
                            }
                        }
                        $('#txtCity').val(city.long_name);
                        $('#txtState').val(region.long_name);
                        $('#txtCountry').val(country.long_name);
                    }
                }
            });
        }

    })(jQuery);

</script>

<script src="~/Content/app-assets/vendors/js/gallery/masonry/masonry.pkgd.min.js" type="text/javascript"></script>
<script src="~/Content/app-assets/vendors/js/gallery/photo-swipe/photoswipe.min.js" type="text/javascript"></script>
<script src="~/Content/app-assets/vendors/js/gallery/photo-swipe/photoswipe-ui-default.min.js" type="text/javascript"></script>
<script src="~/Content/app-assets/js/scripts/gallery/photo-swipe/photoswipe-script.js" type="text/javascript"></script>

<script>
    var myDropzone;
    Dropzone.options.myAwesomeDropzone = { // The camelized version of the ID of the form element
        // The configuration we've talked about above
        url: '/Admin/Branch/FileUpload',
        autoProcessQueue: false,
        uploadMultiple: false,
        parallelUploads: 1,
        maxFiles: 1,
        addRemoveLinks: true,

        // The setting up of the dropzone
        init: function () {
            myDropzone = this;
            this.on("maxfilesexceeded", function (file) {
                this.removeFile(file);
                alert("only one file allowed to upload.")
                return;
            }); 
            this.on("sending", function (file, xhr, formData) {
                debugger;
                var filename = new Date().YYYYMMDDHHMMSS() + "." + file.name.split('.').pop();;
                $("#hdnfileName").val(filename);
                formData.append("filename", filename);
            });
        }
    }
</script>